
import { useState } from 'react';
import { X, Send, Bot, User, Sparkles } from 'lucide-react';

interface AIProfileAnalysisModalProps {
  isOpen: boolean;
  onClose: () => void;
}

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

const AIProfileAnalysisModal = ({ isOpen, onClose }: AIProfileAnalysisModalProps) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa Job Buddy. T√¥i s·∫Ω gi√∫p b·∫°n ph√¢n t√≠ch h·ªì s∆° v√† ƒë∆∞a ra l·ªùi khuy√™n ƒë·ªÉ c·∫£i thi·ªán c∆° h·ªôi vi·ªác l√†m. H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch chia s·∫ª th√¥ng tin v·ªÅ b·∫£n th√¢n b·∫°n.',
      sender: 'ai',
      timestamp: new Date()
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const aiResponses = [
    'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! D·ª±a tr√™n th√¥ng tin n√†y, t√¥i th·∫•y b·∫°n c√≥ n·ªÅn t·∫£ng t·ªët. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ kinh nghi·ªám l√†m vi·ªác v√† k·ªπ nƒÉng hi·ªán t·∫°i kh√¥ng?',
    'R·∫•t t·ªët! T√¥i nh·∫≠n th·∫•y b·∫°n c·∫ßn b·ªï sung m·ªôt s·ªë k·ªπ nƒÉng ƒë·ªÉ ph√π h·ª£p h∆°n v·ªõi th·ªã tr∆∞·ªùng vi·ªác l√†m hi·ªán t·∫°i. B·∫°n c√≥ quan t√¢m ƒë·∫øn vi·ªác h·ªçc th√™m k·ªπ nƒÉng n√†o c·ª• th·ªÉ kh√¥ng?',
    'D·ª±a tr√™n ph√¢n t√≠ch, t√¥i khuy√™n b·∫°n n√™n t·∫≠p trung v√†o vi·ªác ph√°t tri·ªÉn k·ªπ nƒÉng c√¥ng ngh·ªá v√† ngo·∫°i ng·ªØ. B·∫°n c√≥ mu·ªën t√¥i ƒë·ªÅ xu·∫•t l·ªô tr√¨nh h·ªçc t·∫≠p c·ª• th·ªÉ kh√¥ng?',
    'ƒê·ªÉ c·∫£i thi·ªán h·ªì s∆°, t√¥i khuy√™n b·∫°n n√™n: 1) Ho√†n thi·ªán profile LinkedIn, 2) Tham gia c√°c kh√≥a h·ªçc online, 3) X√¢y d·ª±ng portfolio c√° nh√¢n. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ th√™m?',
    'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m c√°c kh√≥a h·ªçc ph√π h·ª£p v√† k·∫øt n·ªëi v·ªõi nh√† tuy·ªÉn d·ª•ng. B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch s√¢u h∆°n v·ªÅ m·ªôt lƒ©nh v·ª±c c·ª• th·ªÉ n√†o kh√¥ng?'
  ];

  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: newMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: randomResponse,
        sender: 'ai',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full h-[80vh] flex flex-col">
        {/* Header */}
        <div className="flex justify-between items-center p-4 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <Sparkles className="h-5 w-5 text-white" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">AI Profile Analyzer</h2>
              <p className="text-sm text-gray-600">Ph√¢n t√≠ch h·ªì s∆° th√¥ng minh v·ªõi AI</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`flex max-w-[80%] ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start space-x-2`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                  message.sender === 'user' 
                    ? 'bg-blue-500 ml-2' 
                    : 'bg-gray-200 mr-2'
                }`}>
                  {message.sender === 'user' ? (
                    <User className="h-4 w-4 text-white" />
                  ) : (
                    <Bot className="h-4 w-4 text-gray-600" />
                  )}
                </div>
                <div className={`rounded-lg p-3 ${
                  message.sender === 'user'
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-900'
                }`}>
                  <p className="text-sm">{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                  }`}>
                    {message.timestamp.toLocaleTimeString('vi-VN', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                </div>
              </div>
            </div>
          ))}

          {isTyping && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-2">
                <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
                  <Bot className="h-4 w-4 text-gray-600" />
                </div>
                <div className="bg-gray-100 rounded-lg p-3">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Message Input */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex space-x-3">
            <textarea
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Chia s·∫ª v·ªÅ b·∫£n th√¢n, kinh nghi·ªám, k·ªπ nƒÉng hi·ªán t·∫°i..."
              className="flex-1 resize-none border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={2}
            />
            <button
              onClick={handleSendMessage}
              disabled={!newMessage.trim()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-1"
            >
              <Send className="h-4 w-4" />
              <span>G·ª≠i</span>
            </button>
          </div>
          <p className="text-xs text-gray-500 mt-2">
            üí° M·∫πo: H√£y chia s·∫ª chi ti·∫øt v·ªÅ kinh nghi·ªám, k·ªπ nƒÉng v√† m·ª•c ti√™u ngh·ªÅ nghi·ªáp ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch ch√≠nh x√°c nh·∫•t
          </p>
        </div>
      </div>
    </div>
  );
};

export default AIProfileAnalysisModal;
